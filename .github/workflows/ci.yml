name: CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        java: [11, 17, 21]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up JDK ${{ matrix.java }}
      uses: actions/setup-java@v4
      with:
        java-version: ${{ matrix.java }}
        distribution: 'temurin'
    
    - name: Cache Maven dependencies
      uses: actions/cache@v3
      with:
        path: ~/.m2
        key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
        restore-keys: ${{ runner.os }}-m2
    
    - name: Download test image
      run: |
        curl -o test-image.jpg "https://thumbs.dreamstime.com/b/demo-red-rubber-stamp-over-white-background-88003515.jpg"
        ls -la test-image.jpg
    
    - name: Run tests
      run: mvn clean test
    
    - name: Build executable JAR
      run: mvn clean package
    
    - name: Test CLI with downloaded image
      run: |
        # Test basic scaling
        java -jar target/jpeg-scaler-1.0.0.jar -i test-image.jpg -o test-output-800x600.jpg -w 800 -h 600 -v
        
        # Test aspect ratio preservation
        java -jar target/jpeg-scaler-1.0.0.jar -i test-image.jpg -o test-output-max500.jpg --max-width 500 --max-height 500 -v
        
        # Test with different quality
        java -jar target/jpeg-scaler-1.0.0.jar -i test-image.jpg -o test-output-quality.jpg -w 400 -h 300 -q 0.9 -v
        
        # Test width-only scaling (maintains aspect ratio)
        java -jar target/jpeg-scaler-1.0.0.jar -i test-image.jpg -o test-output-width-only.jpg -w 600 -v
        
        # Test height-only scaling (maintains aspect ratio)
        java -jar target/jpeg-scaler-1.0.0.jar -i test-image.jpg -o test-output-height-only.jpg -h 400 -v
        
        # Verify output files exist and have correct dimensions
        ls -la test-output-*.jpg
        
        # Test help and version
        java -jar target/jpeg-scaler-1.0.0.jar --help
        java -jar target/jpeg-scaler-1.0.0.jar --version
    
    - name: Verify output images
      run: |
        # Use ImageMagick to verify the output images have correct dimensions
        sudo apt-get update && sudo apt-get install -y imagemagick
        
        echo "Original image dimensions:"
        identify test-image.jpg
        
        echo "800x600 output dimensions:"
        identify test-output-800x600.jpg | grep -o '[0-9]*x[0-9]*'
        
        echo "Max 500 output dimensions:"
        identify test-output-max500.jpg | grep -o '[0-9]*x[0-9]*'
        
        echo "Quality test output dimensions:"
        identify test-output-quality.jpg | grep -o '[0-9]*x[0-9]*'
        
        echo "Width-only output dimensions:"
        identify test-output-width-only.jpg | grep -o '[0-9]*x[0-9]*'
        
        echo "Height-only output dimensions:"
        identify test-output-height-only.jpg | grep -o '[0-9]*x[0-9]*'
        
        # Verify that files were actually created and are not empty
        test -s test-output-800x600.jpg
        test -s test-output-max500.jpg
        test -s test-output-quality.jpg
        test -s test-output-width-only.jpg
        test -s test-output-height-only.jpg
    
    - name: Upload test artifacts
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: test-images-java-${{ matrix.java }}
        path: |
          test-image.jpg
          test-output-*.jpg
        retention-days: 7

  gui-test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        java: [11, 17, 21]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up JDK ${{ matrix.java }}
      uses: actions/setup-java@v4
      with:
        java-version: ${{ matrix.java }}
        distribution: 'temurin'
    
    - name: Cache Maven dependencies
      uses: actions/cache@v3
      with:
        path: ~/.m2
        key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
        restore-keys: ${{ runner.os }}-m2
    
    - name: Set up virtual display for GUI testing
      run: |
        # Install Xvfb for virtual display
        sudo apt-get update
        sudo apt-get install -y xvfb imagemagick
        
        # Start virtual display
        export DISPLAY=:99
        Xvfb :99 -screen 0 1024x768x24 > /dev/null 2>&1 &
        
        # Wait for display to be ready
        sleep 3
        
        # Verify display is working
        xdpyinfo -display :99
    
    - name: Run GUI tests in headless mode
      run: |
        # Run GUI tests with headless mode
        mvn test -Dtest=JpegScalerGUITest
        
        # Also run all tests to ensure CLI tests still work
        mvn test
    
    - name: Build GUI JAR
      run: |
        mvn clean package -DskipTests
        
        # Verify both JARs were created
        ls -la target/*.jar
    
    - name: Test GUI JAR can start (headless)
      run: |
        export DISPLAY=:99
        
        # Try to start GUI in headless mode with timeout
        timeout 10s java -Djava.awt.headless=true -jar target/jpeg-scaler-gui-1.0.0.jar || echo "GUI started and exited as expected in headless mode"
    
    - name: Create GUI screenshots (if display available)
      if: ${{ matrix.java == '11' }}
      run: |
        export DISPLAY=:99
        
        # Install window manager for better screenshot support
        sudo apt-get install -y fluxbox
        
        # Start window manager
        fluxbox &
        sleep 2
        
        # Create a test image for GUI demo
        convert -size 800x600 xc:lightblue -fill darkblue -draw "circle 400,300 400,100" -pointsize 48 -annotate +200+320 "GUI Test Image" gui-demo-input.jpg
        
        # Start GUI application in background
        java -jar target/jpeg-scaler-gui-1.0.0.jar &
        GUI_PID=$!
        
        # Wait for GUI to fully load
        sleep 5
        
        # Take screenshot of initial GUI
        import -window root gui-screenshot-1-initial.png
        
        # Wait a bit more for any animations
        sleep 2
        
        # Take another screenshot
        import -window root gui-screenshot-2-loaded.png
        
        # Clean up
        kill $GUI_PID || true
        
        # Create a composite screenshot showing the GUI
        convert gui-screenshot-1-initial.png gui-screenshot-2-loaded.png +append gui-screenshots-combined.png
        
        # Resize screenshots for better viewing
        convert gui-screenshots-combined.png -resize 1200x600 gui-screenshots-resized.png
        
        # List created screenshots
        ls -la gui-*.png gui-*.jpg
      continue-on-error: true
    
    - name: Upload GUI screenshots and test artifacts
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: gui-screenshots-java-${{ matrix.java }}
        path: |
          gui-*.png
          gui-*.jpg
          target/*.jar
        retention-days: 14

  integration-test:
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up JDK 11
      uses: actions/setup-java@v4
      with:
        java-version: '11'
        distribution: 'temurin'
    
    - name: Build executable JAR
      run: mvn clean package -DskipTests
    
    - name: Test error conditions
      run: |
        # Test missing input file
        ! java -jar target/jpeg-scaler-1.0.0.jar -o output.jpg -w 100 -h 100
        
        # Test missing output file
        ! java -jar target/jpeg-scaler-1.0.0.jar -i test.jpg -w 100 -h 100
        
        # Test missing dimensions
        echo "test" > dummy.txt
        ! java -jar target/jpeg-scaler-1.0.0.jar -i dummy.txt -o output.jpg
        
        # Test invalid quality
        echo "test" > dummy.txt
        ! java -jar target/jpeg-scaler-1.0.0.jar -i dummy.txt -o output.jpg -w 100 -h 100 -q 1.5
        
        # Test non-existent input file
        ! java -jar target/jpeg-scaler-1.0.0.jar -i non-existent.jpg -o output.jpg -w 100 -h 100
    
    - name: Performance test with large image
      run: |
        # Create a larger test image using ImageMagick
        sudo apt-get update && sudo apt-get install -y imagemagick
        convert -size 2000x1500 xc:white -fill red -draw "circle 1000,750 1000,250" large-test.jpg
        
        echo "Large test image created:"
        identify large-test.jpg
        
        # Test scaling performance
        time java -jar target/jpeg-scaler-1.0.0.jar -i large-test.jpg -o large-output.jpg -w 800 -h 600 -v
        
        echo "Large output image:"
        identify large-output.jpg