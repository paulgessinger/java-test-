name: CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        java: [11, 17, 21]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up JDK ${{ matrix.java }}
      uses: actions/setup-java@v4
      with:
        java-version: ${{ matrix.java }}
        distribution: 'temurin'
    
    - name: Cache Maven dependencies
      uses: actions/cache@v3
      with:
        path: ~/.m2
        key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
        restore-keys: ${{ runner.os }}-m2
    
    - name: Download test image
      run: |
        curl -o test-image.jpg "https://thumbs.dreamstime.com/b/demo-red-rubber-stamp-over-white-background-88003515.jpg"
        ls -la test-image.jpg
    
    - name: Run tests
      run: mvn clean test
    
    - name: Build executable JAR
      run: mvn clean package
    
    - name: Test CLI with downloaded image
      run: |
        # Test basic scaling
        java -jar target/jpeg-scaler-1.0.0.jar -i test-image.jpg -o test-output-800x600.jpg -w 800 -h 600 -v
        
        # Test aspect ratio preservation
        java -jar target/jpeg-scaler-1.0.0.jar -i test-image.jpg -o test-output-max500.jpg --max-width 500 --max-height 500 -v
        
        # Test with different quality
        java -jar target/jpeg-scaler-1.0.0.jar -i test-image.jpg -o test-output-quality.jpg -w 400 -h 300 -q 0.9 -v
        
        # Test width-only scaling (maintains aspect ratio)
        java -jar target/jpeg-scaler-1.0.0.jar -i test-image.jpg -o test-output-width-only.jpg -w 600 -v
        
        # Test height-only scaling (maintains aspect ratio)
        java -jar target/jpeg-scaler-1.0.0.jar -i test-image.jpg -o test-output-height-only.jpg -h 400 -v
        
        # Verify output files exist and have correct dimensions
        ls -la test-output-*.jpg
        
        # Test help and version
        java -jar target/jpeg-scaler-1.0.0.jar --help
        java -jar target/jpeg-scaler-1.0.0.jar --version
    
    - name: Verify output images
      run: |
        # Use ImageMagick to verify the output images have correct dimensions
        sudo apt-get update && sudo apt-get install -y imagemagick
        
        echo "Original image dimensions:"
        identify test-image.jpg
        
        echo "800x600 output dimensions:"
        identify test-output-800x600.jpg | grep -o '[0-9]*x[0-9]*'
        
        echo "Max 500 output dimensions:"
        identify test-output-max500.jpg | grep -o '[0-9]*x[0-9]*'
        
        echo "Quality test output dimensions:"
        identify test-output-quality.jpg | grep -o '[0-9]*x[0-9]*'
        
        echo "Width-only output dimensions:"
        identify test-output-width-only.jpg | grep -o '[0-9]*x[0-9]*'
        
        echo "Height-only output dimensions:"
        identify test-output-height-only.jpg | grep -o '[0-9]*x[0-9]*'
        
        # Verify that files were actually created and are not empty
        test -s test-output-800x600.jpg
        test -s test-output-max500.jpg
        test -s test-output-quality.jpg
        test -s test-output-width-only.jpg
        test -s test-output-height-only.jpg
    
    - name: Upload test artifacts
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: test-images-java-${{ matrix.java }}
        path: |
          test-image.jpg
          test-output-*.jpg
        retention-days: 7

  gui-test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        java: [11, 17, 21]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up JDK ${{ matrix.java }}
      uses: actions/setup-java@v4
      with:
        java-version: ${{ matrix.java }}
        distribution: 'temurin'
    
    - name: Cache Maven dependencies
      uses: actions/cache@v3
      with:
        path: ~/.m2
        key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
        restore-keys: ${{ runner.os }}-m2
    
    - name: Install dependencies for GUI testing
      run: |
        sudo apt-get update
        sudo apt-get install -y xvfb imagemagick fluxbox xauth
    
    - name: Set up virtual display for GUI testing
      run: |
        # Start virtual display with error checking
        export DISPLAY=:99
        echo "DISPLAY=:99" >> $GITHUB_ENV
        
        # Start Xvfb with more verbose output for debugging
        Xvfb :99 -screen 0 1024x768x24 -ac +extension GLX +render -noreset &
        XVFB_PID=$!
        echo "XVFB_PID=$XVFB_PID" >> $GITHUB_ENV
        
        # Wait for Xvfb to start
        sleep 3
        
        # Verify Xvfb is running
        if ! ps -p $XVFB_PID > /dev/null; then
          echo "ERROR: Xvfb failed to start"
          exit 1
        fi
        
        # Test display connection
        if ! DISPLAY=:99 xdpyinfo > /dev/null 2>&1; then
          echo "ERROR: Cannot connect to display :99"
          ps aux | grep Xvfb
          exit 1
        fi
        
        echo "Virtual display :99 started successfully"
        
        # Start window manager
        DISPLAY=:99 fluxbox > /dev/null 2>&1 &
        WM_PID=$!
        echo "WM_PID=$WM_PID" >> $GITHUB_ENV
        
        # Wait for window manager
        sleep 2
        
        # Final verification
        DISPLAY=:99 xdpyinfo | head -5
    
    - name: Run GUI tests with virtual display
      run: |
        # Verify display is still available
        echo "Using DISPLAY: $DISPLAY"
        xdpyinfo | head -3
        
        # Run GUI tests with virtual display (not headless)
        mvn test -Dtest=JpegScalerGUITest
        
        # Also run all tests to ensure CLI tests still work
        mvn test
    
    - name: Build GUI JAR
      run: |
        mvn clean package -DskipTests
        
        # Verify both JARs were created
        ls -la target/*.jar
    
    - name: Test GUI JAR can start with virtual display
      run: |
        # Verify display is available
        echo "Testing GUI startup with DISPLAY: $DISPLAY"
        xdpyinfo > /dev/null || (echo "ERROR: Display not available" && exit 1)
        
        # Try to start GUI with virtual display (timeout after 10 seconds)
        timeout 10s java -jar target/jpeg-scaler-gui-1.0.0.jar || echo "GUI started and exited as expected"
    
    - name: Create GUI screenshots
      run: |
        # Verify display and tools are available
        echo "Creating screenshots with DISPLAY: $DISPLAY"
        xdpyinfo > /dev/null || (echo "ERROR: Display not available for screenshots" && exit 1)
        which convert > /dev/null || (echo "ERROR: ImageMagick convert not found" && exit 1)
        which import > /dev/null || (echo "ERROR: ImageMagick import not found" && exit 1)
        
        # Create a test image for GUI demo
        convert -size 800x600 xc:lightblue -fill darkblue -draw "circle 400,300 400,100" -pointsize 48 -annotate +200+320 "GUI Test Image" gui-demo-input.jpg
        echo "Created test input image: gui-demo-input.jpg"
        
        # Take initial screenshot of desktop
        import -window root gui-screenshot-0-desktop.png
        echo "Captured initial desktop screenshot"
        
        # Start GUI application in background
        echo "Starting GUI application..."
        java -jar target/jpeg-scaler-gui-1.0.0.jar &
        GUI_PID=$!
        echo "GUI started with PID: $GUI_PID"
        
        # Wait for GUI to fully load
        echo "Waiting for GUI to load..."
        sleep 10
        
        # Check if GUI process is still running
        if ps -p $GUI_PID > /dev/null; then
          echo "GUI process is running"
        else
          echo "WARNING: GUI process may have exited"
        fi
        
        # Take screenshot of GUI window
        import -window root gui-screenshot-1-with-gui.png
        echo "Captured GUI screenshot"
        
        # List all windows to find GUI window
        echo "Available windows:"
        xwininfo -root -tree | grep -E "^\s+0x[0-9a-f]+" | head -10
        
        # Try to find and screenshot the GUI window specifically
        GUI_WINDOW=$(xwininfo -root -tree | grep -i "jpeg\|scaler" | head -1 | awk '{print $1}' || echo "")
        if [ -n "$GUI_WINDOW" ]; then
          echo "Found GUI window: $GUI_WINDOW"
          import -window "$GUI_WINDOW" gui-screenshot-2-gui-window.png
          echo "Captured specific GUI window screenshot"
        else
          echo "GUI window not found in window list"
        fi
        
        # Wait a bit more
        sleep 3
        
        # Take final screenshot
        import -window root gui-screenshot-3-final.png
        echo "Captured final screenshot"
        
        # Clean up GUI process
        echo "Cleaning up GUI process..."
        kill $GUI_PID 2>/dev/null || true
        sleep 2
        
        # Create composite screenshots if files exist
        if [ -f gui-screenshot-1-with-gui.png ] && [ -f gui-screenshot-3-final.png ]; then
          convert gui-screenshot-1-with-gui.png gui-screenshot-3-final.png +append gui-screenshots-combined.png
          convert gui-screenshots-combined.png -resize 1200x600 gui-screenshots-resized.png
          echo "Created composite screenshots"
        fi
        
        # Create annotated screenshot if main screenshot exists
        if [ -f gui-screenshot-1-with-gui.png ]; then
          convert gui-screenshot-1-with-gui.png -pointsize 24 -fill red -annotate +10+30 "JPEG Scaler GUI - Java ${{ matrix.java }}" gui-screenshot-annotated.png
          echo "Created annotated screenshot"
        fi
        
        # List all created files with sizes
        echo "=== Created screenshot files ==="
        for file in gui-*.png gui-*.jpg; do
          if [ -f "$file" ]; then
            size=$(stat -c%s "$file" 2>/dev/null || echo "unknown")
            echo "$file: $size bytes"
          fi
        done
      continue-on-error: true
    
    - name: Run GUI screenshot test script
      run: |
        # Make script executable and run it
        chmod +x test-gui-screenshot.sh
        ./test-gui-screenshot.sh
      continue-on-error: true
    
    - name: Debug screenshot files
      if: always()
      run: |
        echo "=== Debugging screenshot files ==="
        echo "Current directory: $(pwd)"
        echo "All PNG files:"
        find . -name "*.png" -type f 2>/dev/null || echo "No PNG files found"
        echo "All JPG files:"
        find . -name "*.jpg" -type f 2>/dev/null || echo "No JPG files found"
        echo "Files matching gui-* pattern:"
        ls -la gui-* 2>/dev/null || echo "No files matching gui-* pattern"
        echo "All files in current directory:"
        ls -la
    
    - name: Cleanup virtual display processes
      if: always()
      run: |
        echo "Cleaning up virtual display processes..."
        
        # Kill window manager if it's running
        if [ -n "$WM_PID" ] && ps -p $WM_PID > /dev/null 2>&1; then
          echo "Killing window manager (PID: $WM_PID)"
          kill $WM_PID 2>/dev/null || true
        fi
        
        # Kill Xvfb if it's running
        if [ -n "$XVFB_PID" ] && ps -p $XVFB_PID > /dev/null 2>&1; then
          echo "Killing Xvfb (PID: $XVFB_PID)"
          kill $XVFB_PID 2>/dev/null || true
        fi
        
        # Clean up any remaining processes
        pkill -f "Xvfb :99" 2>/dev/null || true
        pkill -f "fluxbox" 2>/dev/null || true
        
        echo "Cleanup completed"
    
    - name: Upload GUI screenshots and test artifacts
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: gui-screenshots-java-${{ matrix.java }}
        path: |
          gui-*.png
          gui-*.jpg
          screenshot-*.png
          test-input.jpg
          target/*.jar
        retention-days: 14

  integration-test:
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up JDK 11
      uses: actions/setup-java@v4
      with:
        java-version: '11'
        distribution: 'temurin'
    
    - name: Build executable JAR
      run: mvn clean package -DskipTests
    
    - name: Test error conditions
      run: |
        # Test missing input file
        ! java -jar target/jpeg-scaler-1.0.0.jar -o output.jpg -w 100 -h 100
        
        # Test missing output file
        ! java -jar target/jpeg-scaler-1.0.0.jar -i test.jpg -w 100 -h 100
        
        # Test missing dimensions
        echo "test" > dummy.txt
        ! java -jar target/jpeg-scaler-1.0.0.jar -i dummy.txt -o output.jpg
        
        # Test invalid quality
        echo "test" > dummy.txt
        ! java -jar target/jpeg-scaler-1.0.0.jar -i dummy.txt -o output.jpg -w 100 -h 100 -q 1.5
        
        # Test non-existent input file
        ! java -jar target/jpeg-scaler-1.0.0.jar -i non-existent.jpg -o output.jpg -w 100 -h 100
    
    - name: Performance test with large image
      run: |
        # Create a larger test image using ImageMagick
        sudo apt-get update && sudo apt-get install -y imagemagick
        convert -size 2000x1500 xc:white -fill red -draw "circle 1000,750 1000,250" large-test.jpg
        
        echo "Large test image created:"
        identify large-test.jpg
        
        # Test scaling performance
        time java -jar target/jpeg-scaler-1.0.0.jar -i large-test.jpg -o large-output.jpg -w 800 -h 600 -v
        
        echo "Large output image:"
        identify large-output.jpg